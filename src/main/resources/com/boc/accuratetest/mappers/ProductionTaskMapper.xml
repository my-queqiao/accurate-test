<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.boc.accuratetest.mappers.ProductionTaskMapper">
  <resultMap id="BaseResultMap" type="com.boc.accuratetest.pojo.ProductionTask">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="production_task_number" jdbcType="VARCHAR" property="productionTaskNumber" />
    <result column="git_url" jdbcType="VARCHAR" property="gitUrl" />
    <result column="master_branch" jdbcType="VARCHAR" property="masterBranch" />
    <result column="test_branch" jdbcType="VARCHAR" property="testBranch" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, production_task_number, git_url, master_branch, test_branch
  </sql>
  <select id="selectByExample" parameterType="com.boc.accuratetest.pojo.ProductionTaskExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from production_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from production_task
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from production_task
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.boc.accuratetest.pojo.ProductionTaskExample">
    delete from production_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.boc.accuratetest.pojo.ProductionTask">
    insert into production_task (id, production_task_number, git_url, 
      master_branch, test_branch)
    values (#{id,jdbcType=INTEGER}, #{productionTaskNumber,jdbcType=VARCHAR}, #{gitUrl,jdbcType=VARCHAR}, 
      #{masterBranch,jdbcType=VARCHAR}, #{testBranch,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.boc.accuratetest.pojo.ProductionTask">
    insert into production_task
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="productionTaskNumber != null">
        production_task_number,
      </if>
      <if test="gitUrl != null">
        git_url,
      </if>
      <if test="masterBranch != null">
        master_branch,
      </if>
      <if test="testBranch != null">
        test_branch,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="productionTaskNumber != null">
        #{productionTaskNumber,jdbcType=VARCHAR},
      </if>
      <if test="gitUrl != null">
        #{gitUrl,jdbcType=VARCHAR},
      </if>
      <if test="masterBranch != null">
        #{masterBranch,jdbcType=VARCHAR},
      </if>
      <if test="testBranch != null">
        #{testBranch,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.boc.accuratetest.pojo.ProductionTaskExample" resultType="java.lang.Long">
    select count(*) from production_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update production_task
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.productionTaskNumber != null">
        production_task_number = #{record.productionTaskNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.gitUrl != null">
        git_url = #{record.gitUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.masterBranch != null">
        master_branch = #{record.masterBranch,jdbcType=VARCHAR},
      </if>
      <if test="record.testBranch != null">
        test_branch = #{record.testBranch,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update production_task
    set id = #{record.id,jdbcType=INTEGER},
      production_task_number = #{record.productionTaskNumber,jdbcType=VARCHAR},
      git_url = #{record.gitUrl,jdbcType=VARCHAR},
      master_branch = #{record.masterBranch,jdbcType=VARCHAR},
      test_branch = #{record.testBranch,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.boc.accuratetest.pojo.ProductionTask">
    update production_task
    <set>
      <if test="productionTaskNumber != null">
        production_task_number = #{productionTaskNumber,jdbcType=VARCHAR},
      </if>
      <if test="gitUrl != null">
        git_url = #{gitUrl,jdbcType=VARCHAR},
      </if>
      <if test="masterBranch != null">
        master_branch = #{masterBranch,jdbcType=VARCHAR},
      </if>
      <if test="testBranch != null">
        test_branch = #{testBranch,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.boc.accuratetest.pojo.ProductionTask">
    update production_task
    set production_task_number = #{productionTaskNumber,jdbcType=VARCHAR},
      git_url = #{gitUrl,jdbcType=VARCHAR},
      master_branch = #{masterBranch,jdbcType=VARCHAR},
      test_branch = #{testBranch,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="findBy" parameterType="java.lang.String" resultMap="BaseResultMap">
    select * from production_task
    where production_task_number = #{productionTaskNumber,jdbcType=VARCHAR}
  </select>
  <select id="getAll" resultMap="BaseResultMap">
    select * from production_task
  </select>
</mapper>