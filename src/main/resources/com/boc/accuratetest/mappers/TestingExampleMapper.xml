<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.boc.accuratetest.mappers.TestingExampleMapper">
  <resultMap id="BaseResultMap" type="com.boc.accuratetest.pojo.TestingExample">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="belong_product" jdbcType="VARCHAR" property="belongProduct" />
    <result column="function" jdbcType="VARCHAR" property="function" />
    <result column="subfunction" jdbcType="VARCHAR" property="subfunction" />
    <result column="test_item" jdbcType="VARCHAR" property="testItem" />
    <result column="test_point" jdbcType="VARCHAR" property="testPoint" />
    <result column="test_case_number" jdbcType="VARCHAR" property="testCaseNumber" />
    <result column="test_operation_explain" jdbcType="VARCHAR" property="testOperationExplain" />
    <result column="expected_results" jdbcType="VARCHAR" property="expectedResults" />
    <result column="production_task_number" jdbcType="VARCHAR" property="productionTaskNumber" />
    <result column="executed" jdbcType="TINYINT" property="executed" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, belong_product, function, subfunction, test_item, test_point, test_case_number, 
    test_operation_explain, expected_results, production_task_number, executed
  </sql>
  <select id="selectByExample" parameterType="com.boc.accuratetest.pojo.TestingExampleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from testing_example
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from testing_example
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from testing_example
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.boc.accuratetest.pojo.TestingExampleExample">
    delete from testing_example
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.boc.accuratetest.pojo.TestingExample">
    insert into testing_example (id, belong_product, function, 
      subfunction, test_item, test_point, 
      test_case_number, test_operation_explain, expected_results, 
      production_task_number, executed)
    values (#{id,jdbcType=INTEGER}, #{belongProduct,jdbcType=VARCHAR}, #{function,jdbcType=VARCHAR}, 
      #{subfunction,jdbcType=VARCHAR}, #{testItem,jdbcType=VARCHAR}, #{testPoint,jdbcType=VARCHAR}, 
      #{testCaseNumber,jdbcType=VARCHAR}, #{testOperationExplain,jdbcType=VARCHAR}, #{expectedResults,jdbcType=VARCHAR}, 
      #{productionTaskNumber,jdbcType=VARCHAR}, #{executed,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.boc.accuratetest.pojo.TestingExample">
    insert into testing_example
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="belongProduct != null">
        belong_product,
      </if>
      <if test="function != null">
        function,
      </if>
      <if test="subfunction != null">
        subfunction,
      </if>
      <if test="testItem != null">
        test_item,
      </if>
      <if test="testPoint != null">
        test_point,
      </if>
      <if test="testCaseNumber != null">
        test_case_number,
      </if>
      <if test="testOperationExplain != null">
        test_operation_explain,
      </if>
      <if test="expectedResults != null">
        expected_results,
      </if>
      <if test="productionTaskNumber != null">
        production_task_number,
      </if>
      <if test="executed != null">
        executed,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="belongProduct != null">
        #{belongProduct,jdbcType=VARCHAR},
      </if>
      <if test="function != null">
        #{function,jdbcType=VARCHAR},
      </if>
      <if test="subfunction != null">
        #{subfunction,jdbcType=VARCHAR},
      </if>
      <if test="testItem != null">
        #{testItem,jdbcType=VARCHAR},
      </if>
      <if test="testPoint != null">
        #{testPoint,jdbcType=VARCHAR},
      </if>
      <if test="testCaseNumber != null">
        #{testCaseNumber,jdbcType=VARCHAR},
      </if>
      <if test="testOperationExplain != null">
        #{testOperationExplain,jdbcType=VARCHAR},
      </if>
      <if test="expectedResults != null">
        #{expectedResults,jdbcType=VARCHAR},
      </if>
      <if test="productionTaskNumber != null">
        #{productionTaskNumber,jdbcType=VARCHAR},
      </if>
      <if test="executed != null">
        #{executed,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.boc.accuratetest.pojo.TestingExampleExample" resultType="java.lang.Long">
    select count(*) from testing_example
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update testing_example
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.belongProduct != null">
        belong_product = #{record.belongProduct,jdbcType=VARCHAR},
      </if>
      <if test="record.function != null">
        function = #{record.function,jdbcType=VARCHAR},
      </if>
      <if test="record.subfunction != null">
        subfunction = #{record.subfunction,jdbcType=VARCHAR},
      </if>
      <if test="record.testItem != null">
        test_item = #{record.testItem,jdbcType=VARCHAR},
      </if>
      <if test="record.testPoint != null">
        test_point = #{record.testPoint,jdbcType=VARCHAR},
      </if>
      <if test="record.testCaseNumber != null">
        test_case_number = #{record.testCaseNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.testOperationExplain != null">
        test_operation_explain = #{record.testOperationExplain,jdbcType=VARCHAR},
      </if>
      <if test="record.expectedResults != null">
        expected_results = #{record.expectedResults,jdbcType=VARCHAR},
      </if>
      <if test="record.productionTaskNumber != null">
        production_task_number = #{record.productionTaskNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.executed != null">
        executed = #{record.executed,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update testing_example
    set id = #{record.id,jdbcType=INTEGER},
      belong_product = #{record.belongProduct,jdbcType=VARCHAR},
      function = #{record.function,jdbcType=VARCHAR},
      subfunction = #{record.subfunction,jdbcType=VARCHAR},
      test_item = #{record.testItem,jdbcType=VARCHAR},
      test_point = #{record.testPoint,jdbcType=VARCHAR},
      test_case_number = #{record.testCaseNumber,jdbcType=VARCHAR},
      test_operation_explain = #{record.testOperationExplain,jdbcType=VARCHAR},
      expected_results = #{record.expectedResults,jdbcType=VARCHAR},
      production_task_number = #{record.productionTaskNumber,jdbcType=VARCHAR},
      executed = #{record.executed,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.boc.accuratetest.pojo.TestingExample">
    update testing_example
    <set>
      <if test="belongProduct != null">
        belong_product = #{belongProduct,jdbcType=VARCHAR},
      </if>
      <if test="function != null">
        function = #{function,jdbcType=VARCHAR},
      </if>
      <if test="subfunction != null">
        subfunction = #{subfunction,jdbcType=VARCHAR},
      </if>
      <if test="testItem != null">
        test_item = #{testItem,jdbcType=VARCHAR},
      </if>
      <if test="testPoint != null">
        test_point = #{testPoint,jdbcType=VARCHAR},
      </if>
      <if test="testCaseNumber != null">
        test_case_number = #{testCaseNumber,jdbcType=VARCHAR},
      </if>
      <if test="testOperationExplain != null">
        test_operation_explain = #{testOperationExplain,jdbcType=VARCHAR},
      </if>
      <if test="expectedResults != null">
        expected_results = #{expectedResults,jdbcType=VARCHAR},
      </if>
      <if test="productionTaskNumber != null">
        production_task_number = #{productionTaskNumber,jdbcType=VARCHAR},
      </if>
      <if test="executed != null">
        executed = #{executed,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.boc.accuratetest.pojo.TestingExample">
    update testing_example
    set belong_product = #{belongProduct,jdbcType=VARCHAR},
      function = #{function,jdbcType=VARCHAR},
      subfunction = #{subfunction,jdbcType=VARCHAR},
      test_item = #{testItem,jdbcType=VARCHAR},
      test_point = #{testPoint,jdbcType=VARCHAR},
      test_case_number = #{testCaseNumber,jdbcType=VARCHAR},
      test_operation_explain = #{testOperationExplain,jdbcType=VARCHAR},
      expected_results = #{expectedResults,jdbcType=VARCHAR},
      production_task_number = #{productionTaskNumber,jdbcType=VARCHAR},
      executed = #{executed,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="page" resultMap="BaseResultMap">
    select * from testing_example 
    where 1 = 1
    <if test="productionTaskNumber != null">
        and production_task_number = #{productionTaskNumber,jdbcType=VARCHAR}
    </if>
    <if test="search != null">
        and belong_product = #{search,jdbcType=VARCHAR}
    </if>
    limit #{limit} , #{pageSize}
  </select>
  
  <select id="findTotal" resultType="java.lang.Integer">
    select count(*) from testing_example 
    where 1 = 1 
    <if test="productionTaskNumber != null">
        and production_task_number = #{productionTaskNumber,jdbcType=VARCHAR}
    </if>
    <if test="search != null">
        and belong_product = #{search,jdbcType=VARCHAR}
    </if>
  </select>
  <insert id="batchSave" parameterType="java.util.List">
    insert into testing_example (belong_product, function, subfunction, test_item, test_point, 
    	test_case_number, test_operation_explain, expected_results, 
      production_task_number,executed)
    values 
    <foreach collection="list" index="index" item="item" separator=",">
	    (#{item.belongProduct,jdbcType=VARCHAR}, #{item.function,jdbcType=VARCHAR}, #{item.subfunction,jdbcType=VARCHAR}, 
	    #{item.testItem,jdbcType=VARCHAR}, #{item.testPoint,jdbcType=VARCHAR}, 
      #{item.testCaseNumber,jdbcType=VARCHAR}, #{item.testOperationExplain,jdbcType=VARCHAR}, 
      #{item.expectedResults,jdbcType=VARCHAR}, #{item.productionTaskNumber,jdbcType=VARCHAR}
      ,#{executed,jdbcType=TINYINT})
    </foreach>
  </insert>
  <select id="findByIds" parameterType="java.util.List" resultMap="BaseResultMap">
    select * from testing_example
        where id in 
        <foreach close=")" collection="list" index="index" item="id" open="(" separator=",">
		  #{id}
		</foreach>
  </select>
</mapper>